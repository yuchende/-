

题目：打家劫舍
		你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。

		给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。

		示例 1:

		输入: [1,2,3,1]
		输出: 4
		解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
		     偷窃到的最高金额 = 1 + 3 = 4 。
		示例 2:

		输入: [2,7,9,3,1]
		输出: 12
		解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
		     偷窃到的最高金额 = 2 + 9 + 1 = 12 。


思路：
			这是一个DP问题
			
			dp[x] 为偷第x家的最大利润。
			最优子结构为： dp[x] = Math.max(dp[x - 2] + nums[x] , maxRes);  //即偷第i家的最大利润为 =  （偷第i-2家的利润和当前这家金额之和）  与  （前i家最大利润）的最大值
						   maxRes = dp[x];
							
						  dp[i] = max(dp[i - 1], dp[i - 2] + nums[i - 1]); 
						  
			初始化：
				d[0] = num[0]
				dp[1] = 为num[0],num[1] 的最大值。
				maxRes = dp[1];
			
			总结：1.当前题能否用dp解决的关键，在于是否有最优子结构。即递推关系。
					说白了是d[i] 和 d[i-1]是什么关系。注意这里不一定是dp[i-1]，也可能是dp[i-2]
				  
		
优化前的代码：

		// class Solution {
		//     public int rob(int[] nums) {

		//         if(nums.length == 0){  return  0; } 
		//         if(nums.length ==  1){ return nums[0];}
		//         if(nums.length <= 2){ return Math.max(nums[0],nums[1]); }

		//         int[] dp =  new int[nums.length];
		//         dp[0] = nums[0];
		//         dp[1] = nums[1] < nums[0] ? nums[0] : nums[1];
		//         int maxRes = dp[0] > dp[1] ? dp[0] : dp[1];
		//         int jishu = nums[0]
		//         for(int x = 2; x < nums.length; x++){
					
		//             dp[x] = Math.max(dp[x - 2] + nums[x] , maxRes);
		//             maxRes = dp[x];
		//         }
		//         return maxRes;
		//     }
		// }

优化后的代码：  压缩并记住2个状态。
	
		class Solution {
			public int rob(int[] nums) {

				if(nums.length == 0){  return  0; } 
				if(nums.length ==  1){ return nums[0];}
				if(nums.length <= 2){ return Math.max(nums[0],nums[1]); }

				int jishu = nums[1] < nums[0] ? nums[0] : nums[1];
				int oushu = nums[0];
				int maxRes = jishu;

				for(int x = 2; x < nums.length; x++){
					if(x % 2 == 0 ){
						oushu = Math.max(oushu + nums[x] , maxRes);
						maxRes = oushu;
					}else{
						jishu = Math.max(jishu + nums[x] , maxRes);
						maxRes = jishu;
					}
				}
				return maxRes;
			}
		}