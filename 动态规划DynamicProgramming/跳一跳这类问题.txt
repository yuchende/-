
现在小v从左边第一个盒子上开始体验游戏，请问最少需要移动几次能到最后一个盒子上？

	输入
	输入 ：2 2 3 0 4

	表示现在有5个盒子，上面的数字分别是2, 2, 3, 0, 4。


	输出
	输出：2

	小v有两种跳法：

	跳法1：盒子1 -> 盒子2 -> 盒子3 -> 盒子5，共3下

	跳法2：盒子1 -> 盒子3 -> 盒子5，共2下
	
思路：
	从后往前找到一个能够一次跳终点的结点k，更换当前终点为k。不断循环即可。
	
	直到跳到0为止，不跳到0，则为跳不到返回-1.
	
	
class Solution {
    /*
     @param str: 输入字符串序列
     @return int: 返回正确的结果
   */
    private static int[] arr;
    private static boolean isReach = true;
    public int func(String str) {
        if (str == null || str.length() == 0 || str.length() == 1) {
            return 0;
        }

       String[] s = str.split(" ");
        arr = new int[s.length];
        for (int k = 0; k < s.length; k++) {
            arr[k] = Integer.parseInt(s[k]);
        }
      
        int res  = jump2(arr.length - 1);
        if (!isReach) {
            return -1;
        } else {
            return res;
        }
    }

    public int jump2(int destination){
        if(destination == 0){ return 0;} //到达起点
      
        int cur = 0;
        while (cur < destination && arr[cur] + cur < destination) {
            cur++;
        }
       // System.out.println("cur = " + cur);
        if( cur >= destination){
            //System.out.println("cur stop = " + cur);
            isReach = false; return 0;}
        return jump2(cur) + 1;
    }
}