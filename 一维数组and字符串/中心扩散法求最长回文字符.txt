
1.题目描述
	5. 最长回文子串

	给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。

	示例 1：

	输入: "babad"
	输出: "bab"
	注意: "aba" 也是一个有效答案。
	示例 2：

	输入: "cbbd"
	输出: "bb"

	思路：
		1.method 中心扩散法
			以字符串中每个字符作为回文的中心点，向2边扩散。 找到最长回文字符串。记录长度以及 回文起始点。
			回文字符串的中心点为 当前字符 ， 或 当前字符与下一个字符。
			时间复杂度O(n^2),空间复杂度O(n),若不转换成chararray 空间复杂度为O(1),但时间复杂度可能有所升高。

		2.method 动态规划
			dp[i][j] 表示s[i...j] 是否构成回文字符串
			状态转换的思路：
				dp[i][j] = (s[i] == s[j]) && (dp[i+1][dp[j-1]])
				且i与j 满足 j - i >= 0 
				状态转换顺序： 在列的基础上，更新行。


		总结：
			s.charAt(index)字符串定位某个字符的效率不如转化成字符数组。

	class Solution {
	    public String longestPalindrome(String s) {
		        if(s == null|| s.trim().length() <= 1){ return s;}

		        int maxlen = 1;
		        int begin = 0;
		        char[] chs = s.toCharArray();
		        for(int x = 0; x < chs.length; x++){
		            int oldnum = calMaxlen(chs, x, x);
		            int evennum = calMaxlen(chs, x, x + 1);

		            int curmax = oldnum > evennum ? oldnum:evennum;
		            if(curmax <= maxlen){ continue;}

		            if(curmax == oldnum){
		                begin = x - (curmax / 2); 
		            }else{
		                begin = x+1 - (curmax / 2);
		            }
		            maxlen = curmax;
		        }

		        return s.substring(begin , begin + maxlen);
		    }
		    public int calMaxlen(char[] chs,int mid1,int mid2){
		        int res = (mid1 == mid2) ? -1 : 0;
		        while( mid1 >= 0 && mid2 < chs.length  && chs[mid1--] == chs[mid2++]) res+=2;
		        return res;
		    }
	}