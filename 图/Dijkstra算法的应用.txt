


1.题目描述

		有 N 个网络节点，标记为 1 到 N。
		给定一个列表 times，表示信号经过有向边的传递时间。 times[i] = (u, v, w)，其中 u 是源节点，v 是目标节点， w 是一个信号从源节点传递到目标节点的时间。
		现在，我们从某个节点 K 发出一个信号。需要多久才能使所有节点都收到信号？如果不能使所有节点收到信号，返回 -1。
	
		输入：times = [[2,1,1],[2,3,1],[3,4,1]], N = 4, K = 2
		输出：2
		
		思路：
			将信号传播的时间作为 两点之间的 距离。
			用Dijkstra算法找到这一点到所有点的距离。并在其中 找到顶点K到 其他所有顶点中 的最长距离即可。
		
	
邻接矩阵的建立，并用Dijkstra算法解决
=================================
	//Breadth First Search. BFS 
	// BFS 的特点  BFS + 动态规划。
	class Solution {
		public int networkDelayTime(int[][] times, int N, int K) {
			if(times == null||times.length == 0||times[0].length == 0){
				return -1;
			}
			//init arr
			int[][] adj = new int[N + 1][N + 1];
			for(int[] arr:adj){
				Arrays.fill(arr,Integer.MAX_VALUE);
			}
			// 有权图
			for(int[] temp: times){
				adj[temp[0]][temp[1]] = temp[2];
			}
			//res[i] 表示k到i的距离
			int[] res = new int[N + 1];
			Arrays.fill(res,Integer.MAX_VALUE);
			res[K] = 0;

			//cal result
			Queue<Integer> que = new LinkedList<>();
			que.offer(K);

			while(que.isEmpty()==false){
				int start = que.poll();
				for(int x = 1; x <= N; x++){
					int distance = adj[start][x];
					if(distance != Integer.MAX_VALUE && res[start] + distance < res[x]){ // res[start] + distance 为当前K 到 start 到 i 的距离，与 K到i的距离做比较。
						res[x] = res[start] + distance;
						que.offer(x);
					}
				}
			}
			int ans = 0;
			for(int x = 1; x <= N; x++){
				if(res[x] == Integer.MAX_VALUE){
					return -1;
				}
				ans = Math.max(ans , res[x]);
			}
			return ans;

		}
	}
===============================

 
