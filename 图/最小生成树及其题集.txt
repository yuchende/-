


本文解决 ，最小生成树及其相关的问题

基本概念：
	并查集的概念
		什么是联通分量，一颗二叉树可看作是一个图，一个联通量，则每个结点的顶层parent是相同的即根节点。
		三个操作：
			1.init 将每个顶点作为独立的联通分量。即其parent为自己。
			2.find 找到这个顶点所在 联通分量的顶层parent。每个联通分量都有一个相同的顶层parent。
			3.union 将两个联通分量合并，成为1个单独的联通分量。
		存储：
			联通分量的存储通常用一个一维数组。
			即parent[X] = Y 表示X的直接parent 为 Y
			又如parent[Y] = Z 表示Y的直接parent为Z
			假如此图有三个顶点，那么X,Y,Z的顶层parent都为Z。

	Kruscal算法的核心
		核心是加边。
		
	
应用：
	并查集可用来判断一个无向图是否有环。
	
	


题目：冗余连接 II  https://leetcode-cn.com/problems/redundant-connection-ii/solution/
	在本问题中，有根树指满足以下条件的有向图。该树只有一个根节点，所有其他节点都是该根节点的后继。每一个节点只有一个父节点，除了根节点没有父节点。
	输入一个有向图，该图由一个有着N个节点 (节点值不重复1, 2, ..., N) 的树及一条附加的边构成。附加的边的两个顶点包含在1到N中间，这条附加的边不属于树中已存在的边。
	结果图是一个以边组成的二维数组。 每一个边 的元素是一对 [u, v]，用以表示有向图中连接顶点 u and v和顶点的边，其中父节点u是子节点v的一个父节点。
	返回一条能删除的边，使得剩下的图是有N个节点的有根树。若有多个答案，返回最后出现在给定二维数组的答案。
	
	示例 1:
	输入: [[1,2], [1,3], [2,3]]
	输出: [2,3]
	解释: 给定的有向图如下:

	示例 2:
	输入: [[1,2], [2,3], [3,4], [4,1], [1,5]]
	输出: [4,1]
	
	



例题：
	https://leetcode-cn.com/problems/redundant-connection/ 已解决
	
	https://leetcode-cn.com/problems/redundant-connection-ii/
	
	https://leetcode.com/problems/accounts-merge/
	
	
	
	
	===============================================
	class Solution {
		

		public int[] findRedundantConnection(int[][] edges) {
			int N = edges.length;
			int[] parent = new int[N + 1];
			for (int i = 1; i < N + 1; i++) {
				parent[i] = i;
			}
			for (int[] edge : edges) {
				if (find(parent, edge[0]) == find(parent, edge[1])) {
					return edge;
				} else {
					union(parent, edge[0], edge[1]);
				}
			}
			return new int[0];
		}
		private int find(int[] parent, int x) {
			return x == parent[x]? x: find(parent,parent[x]);
		}
		private void union(int[] parent, int x, int y) {
			int parentX = find(parent, x);
			int parentY = find(parent, y);
			if (parentX != parentY) {
				parent[parentY] = parentX;
			}
		}
	}
	================================================