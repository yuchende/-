

序列化与反序列化
		序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。

		请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。

		示例: 

		你可以将以下二叉树：

			1
		   / \
		  2   3
			 / \
			4   5

		序列化为 "[1,2,3,null,null,4,5]"

        https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/

思路：
	// 序列化时按照先序遍历，遇到根即可。
	// 反序列化  ，按照先序遍历的思路，每碰到连续 2个null该子树已经完成创建。

 // 序列化时按照先序遍历，遇到根即可。
 // Encodes a tree to a single string.
  public String serialize(TreeNode root) {
    return rserialize(root, new StringBuilder("")).toString();
  }
   public StringBuilder rserialize(TreeNode root, StringBuilder str) {
       if(root == null){ str.append("null,"); }
       else{

           str.append(String.valueOf(root.val) + ","); 
           rserialize(root.left , str);
           rserialize(root.right , str);
       }
       
       return str;
  }


// 反序列化  ，按照先序遍历的思路，每碰到连续 2个null该子树已经完成创建。
public TreeNode deserialize(String data) {

      return rdeserialize(new LinkedList<>(Arrays.asList(data.split(","))));
}

public TreeNode rdeserialize(List<String> l) {
       if(l.get(0).equals("null")){
           l.remove(0);
           return null;
       }
       
       TreeNode root = new TreeNode(Integer.valueOf(l.get(0)));
       l.remove(0);

        root.left = rdeserialize(l);
        root.right = rdeserialize(l);

        return root;
  }