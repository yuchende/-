

1.题目描述
	2. 两数相加

	给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。

	如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

	您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

	示例：

	输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
	输出：7 -> 0 -> 8
	原因：342 + 465 = 807


	思路：
		链表合并可以在一个循环内搞定
		while(p1!=null || p2 != null){}

		3个个位数相加，永远是个2位数。进位永远是1位数。


	代码：
	class Solution {
	    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
	        int c = 0; // 进位
	        ListNode head = new ListNode(0);
	        ListNode px = head , p1 = l1 ,p2 = l2;     
	        while(p1!=null || p2 != null){
	            int v1 = p1 != null ? p1.val:0;
	            int v2 = p2 != null ? p2.val:0;

	            c += v1 + v2;
	            px.next = new ListNode(c%10);
	            c /=10;
	            px = px.next;
	            p1 = p1 !=null ? p1.next:null;
	            p2 = p2 !=null ? p2.next:null;
	        }
	        if(c>0){ px.next = new ListNode(c%10); }
	        return head.next;
	        
	    }
	}